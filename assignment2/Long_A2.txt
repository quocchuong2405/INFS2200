-- Assignment 2 --

-- Task 1.1

prompt ===== Task 1.1 =====
SET LINESIZE 105
COLUMN station_name FORMAT A40;
COLUMN total_revenue FORMAT 99999999;
/*
WITH StationStops AS (
    SELECT 
		s.parent_station AS station_id,
		t.charge AS revenue
    FROM 
		STOPS s
    JOIN 
		TAPS t ON s.stop_id = t.stop_id
    WHERE
        s.parent_station IS NOT NULL
)
SELECT
    s.stop_name AS station_name,
    SUM(ss.revenue) AS total_revenue
FROM
    StationStops ss
JOIN
    STOPS s ON ss.station_id = s.stop_id
GROUP BY
    s.stop_name
ORDER BY
    total_revenue DESC
FETCH FIRST 10 ROWS ONLY;


-- Task 1.2
prompt ===== Task 1.2 =====

WITH StationConcession AS (
    SELECT
        s.parent_station AS station_id,
        t.charge AS revenue
    FROM
        STOPS s
    JOIN
        TAPS t ON s.stop_id = t.stop_id
    JOIN
        CUSTOMERS c ON t.customer_id = c.customer_id
    WHERE
        c."class" = 'Concession' AND t.charge >= 350
)
SELECT
    s.stop_name AS station_name,
    SUM(sc.revenue) AS total_revenue
FROM
    StationConcession sc
JOIN
    STOPS s ON sc.station_id = s.stop_id
GROUP BY
    s.stop_name
ORDER BY
    total_revenue DESC
FETCH FIRST 10 ROWS ONLY;


prompt ===== Drop view ===
DROP VIEW V_STATION_BOARDINGS;
DROP MATERIALIZED VIEW MV_STATION_BOARDINGS;

-- Task 1.3
prompt ===== Task 1.3 =====
ALTER SESSION SET NLS_TERRITORY = 'AMERICA';

CREATE VIEW V_STATION_BOARDINGS AS
SELECT
    station.stop_name AS station_name,
    c."class" AS fare_class,
    TO_CHAR(t."timestamp", 'Dy') AS day_of_week,
    COUNT(*) AS boardings
FROM
    TAPS t
JOIN
    STOPS s ON s.stop_id = t.stop_id
JOIN
    CUSTOMERS c ON t.customer_id = c.customer_id
JOIN
    STOPS station ON s.parent_station = station.stop_id
WHERE
    s.parent_station IS NOT NULL 
AND
	t.charge = 0
GROUP BY
    station.stop_name,
    c."class",
    TO_CHAR(t."timestamp", 'Dy'),
	TO_CHAR("timestamp", 'D')
ORDER BY
    station.stop_name,
	TO_CHAR("timestamp", 'D'),
    c."class";
	
-- Print first 10 rows --
prompt ===== Task 1.3: First 10 rows =====
SELECT * FROM V_STATION_BOARDINGS
FETCH FIRST 10 ROWS ONLY;


-- Print last 10 rows --
prompt ===== Task 1.3: Last 10 rows =====
SELECT * FROM (
	SELECT * FROM V_STATION_BOARDINGS
	ORDER BY ROWNUM DESC
)
WHERE ROWNUM < 11;


-- Task 1.4
prompt ===== Task 1.4 =====

CREATE MATERIALIZED VIEW MV_STATION_BOARDINGS AS
SELECT
    station.stop_name AS station_name,
    c."class" AS fare_class,
    TO_CHAR(t."timestamp", 'Dy') AS day_of_week,
    COUNT(*) AS boardings
FROM
    TAPS t
JOIN
    STOPS s ON s.stop_id = t.stop_id
JOIN
    CUSTOMERS c ON t.customer_id = c.customer_id
JOIN
    STOPS station ON s.parent_station = station.stop_id
WHERE
    s.parent_station IS NOT NULL 
AND
	t.charge = 0
GROUP BY
    station.stop_name,
    c."class",
    TO_CHAR(t."timestamp", 'Dy'),
	TO_CHAR("timestamp", 'D')
ORDER BY
    station.stop_name,
	TO_CHAR("timestamp", 'D'),
    c."class";

-- Print first 10 rows --
prompt ===== Task 1.4: First 10 rows =====
SELECT * FROM V_STATION_BOARDINGS
FETCH FIRST 10 ROWS ONLY;


-- Print last 10 rows --
prompt ===== Task 1.4: Last 10 rows =====
SELECT * FROM (
	SELECT * FROM V_STATION_BOARDINGS
	ORDER BY ROWNUM DESC
)
WHERE ROWNUM < 11;


-- Task 1.5

/*
prompt ===== Task 1.5 =====

-- Measure execution time
SET TIMING ON;
-- Retrieve query execution plan
EXPLAIN PLAN FOR SELECT * FROM V_STATION_BOARDINGS;
-- Execute the query
SELECT * FROM V_STATION_BOARDINGS;
-- Display the query execution plan
SELECT * FROM table(DBMS_XPLAN.DISPLAY(FORMAT=>'ALL'));


-- Measure execution time
SET TIMING ON;
-- Retrieve query execution plan
EXPLAIN PLAN FOR SELECT * FROM MV_STATION_BOARDINGS;
-- Execute the query
SELECT * FROM MV_STATION_BOARDINGS;
-- Display the query execution plan
SELECT * FROM table(DBMS_XPLAN.DISPLAY(FORMAT=>'ALL'));


-- Task 2.1
DROP INDEX IDX_PINK;
prompt ===== Task 2.1 =====
SET TIMING ON;
ALTER SESSION SET OPTIMIZER_MODE = FIRST_ROWS;
EXPLAIN PLAN FOR
SELECT *
FROM STOPS
WHERE REGEXP_INSTR(UPPER(stop_name), '^B[AEIOUY]*[R]{1,2}[AEIOUY]*[B]') > 0
OR REGEXP_INSTR(UPPER(stop_name), '^K[AEIOUY]+[N]') > 0
OR REGEXP_INSTR(UPPER(stop_name), ' B[AEIOUY]*[R]{1,2}[AEIOUY]*[B]') > 0
OR REGEXP_INSTR(UPPER(stop_name), ' K[AEIOUY]+[N]') > 0
ORDER BY stop_name;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

/*


ALTER SESSION SET OPTIMIZER_MODE = CHOOSE;
DROP INDEX IDX_PINK;
-- Task 2.2
prompt ===== Task 2.2 =====
CREATE INDEX IDX_PINK
ON STOPS(
	UPPER(stop_name)
);

-- Task 2.3 
EXPLAIN PLAN FOR
SELECT *
FROM STOPS
WHERE REGEXP_INSTR(UPPER(stop_name), '^B[AEIOUY]*[R]{1,2}[AEIOUY]*[B]') > 0
OR REGEXP_INSTR(UPPER(stop_name), '^K[AEIOUY]+[N]') > 0
OR REGEXP_INSTR(UPPER(stop_name), ' B[AEIOUY]*[R]{1,2}[AEIOUY]*[B]') > 0
OR REGEXP_INSTR(UPPER(stop_name), ' K[AEIOUY]+[N]') > 0
ORDER BY stop_name;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);
*/
-- Task 2.4
DROP INDEX BIDX_CUST_ID;
DROP INDEX BIDX_STOP_ID;
DROP INDEX BIDX_CHARGE;

prompt ===== Task 2.4 =====
EXPLAIN PLAN FOR
SELECT COUNT(*)
FROM TAPS t1
WHERE EXISTS (
    SELECT charge
    FROM TAPS t2
    WHERE t2.customer_id = t1.customer_id
    AND t2.stop_id = t1.stop_id
    AND t2.charge = t1.charge
    AND t2.charge > 0
    GROUP BY t2.customer_id, t2.stop_id, t2.charge
    HAVING COUNT(*) >= 200
);
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);	

/*
-- Task 2.5
prompt ===== Task 2.5 =====
-- Create bitmap index for customer_id
CREATE BITMAP INDEX BIDX_CUST_ID
ON TAPS(customer_id);

-- Create bitmap index for stop_id
CREATE BITMAP INDEX BIDX_STOP_ID
ON TAPS(stop_id);

-- Create bitmap index for charge
CREATE BITMAP INDEX BIDX_CHARGE
ON TAPS(charge);

-- Task 2.6
EXPLAIN PLAN FOR
SELECT COUNT(*)
FROM TAPS
WHERE EXISTS (
	SELECT * 
	FROM TAPS
	WHERE 
		charge > 0
	GROUP BY 
		customer_id, 
		stop_id, 
		charge
	HAVING COUNT(*) >= 200
);
SELECT SUM(COUNT(*))
FROM 
	TAPS
WHERE 
	charge > 0
GROUP BY 
	customer_id, 
	stop_id, 
	charge
HAVING COUNT(*) >= 200;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);	

/*
-- Task 3.1.a
prompt ===== Task 3.1.a =====
ANALYZE index PK_TAPID validate structure;
SELECT HEIGHT
FROM INDEX_STATS;

-- Task 3.1.b
prompt ===== Task 3.1.b =====
SELECT LF_BLKS
FROM INDEX_STATS;

-- Task 3.1.c
prompt ===== Task 3.1.c =====
SELECT BLOCKS
FROM USER_TABLES
WHERE TABLE_NAME = 'TAPS';


-- Task 3.2 --
set autotrace off;

prompt ===== Task 3.2 =====
ALTER SESSION SET OPTIMIZER_MODE = RULE;
EXPLAIN PLAN FOR
SELECT * FROM TAPS WHERE TAP_ID > 100;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

-- Task 3.3 --
prompt ===== Task 3.3 =====
ALTER SESSION SET OPTIMIZER_MODE = CHOOSE;
EXPLAIN PLAN FOR
SELECT * FROM TAPS WHERE TAP_ID > 100;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

/*

-- Task 3.4 --
prompt ===== Task 3.4 =====
ALTER SESSION SET OPTIMIZER_MODE = CHOOSE;
EXPLAIN PLAN FOR
SELECT * FROM TAPS WHERE TAP_ID > 73900;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);


-- Task 3.5 --
prompt ===== Task 3.5 =====
ALTER SESSION SET OPTIMIZER_MODE = CHOOSE;
EXPLAIN PLAN FOR
SELECT * FROM TAPS WHERE TAP_ID = 10000;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

*/